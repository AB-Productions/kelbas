const UUID=()=>{let e=()=>(65536*(1+Math.random())|0).toString(16).substring(1);return"p"+(e()+e())+"-"+e()};class Parser{constructor(e,...t){this.values_map=[],this.string=this.concat_string(e,t)}concat_string(e,t){return e.map((e,n)=>{const a=t[n],r=UUID();switch(!0){case"function"==typeof a:e=e.concat(`" data-${r}="`),this.values_map.push({id:r,value:a});break;case"object"==typeof a||a&&1===a.nodeType:e=`${e} <template data-${r}=""></template>`,this.values_map.push({id:r,value:a});break;case"string"==typeof a:e=`${e}${a||""}`}return e}).reduce((e,t)=>e+t)}get fragment(){const e=document.createElement("div");return e.innerHTML=this.string,this.place_values(e.firstElementChild)}place_values(e){return this.values_map.forEach(t=>{let n=e.querySelector(`[data-${t.id}]`)||e.closest(`[data-${t.id}]`);if(!n)throw new Error(`Warning: could not match event listener --- could not find element with id ${t.id} --- Function must be defined between parentheses for example "\${calledFunction}"`);if("function"==typeof t.value){const e=/(on)\w+/g.exec(n.outerHTML)[0].split("on")[1];n.addEventListener(e,t.value.bind(this)),n.removeAttribute(`on${e}`),n.removeAttribute(`data-${t.id}`)}else if("object"==typeof t.value)if(t.value.children)n.replaceWith(t.value);else{const e=document.createDocumentFragment();t.value.forEach(t=>e.appendChild(t)),n.replaceWith(e)}}),e}}function html(e,...t){return new Parser(e,...t).fragment}window.html=html;export default html;
