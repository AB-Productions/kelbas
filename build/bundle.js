const UUID=()=>{let t=()=>(65536*(1+Math.random())|0).toString(16).substring(1);return"p"+(t()+t())+"-"+t()};class Parser{constructor(t,...e){this.values_map=[],this.concat_string=this.concat_string.bind(this),this.add_event_listeners=this.add_event_listeners.bind(this),this.string=this.concat_string(t,e)}concat_string(t,e){return t.map((t,n)=>{const s=e[n],r=UUID();return"function"==typeof s&&(t=t.concat(`"${r} `),this.values_map.push({id:r,value:s})),"string"==typeof s&&(t=`${t}${s||""}`),t}).reduce((t,e)=>t+e)}get content(){const t=document.createElement("template");return t.innerHTML=this.string,this.add_event_listeners(t.content.cloneNode(!0))}get parsed(){return(new DOMParser).parseFromString(this.string,"text/html").body.firstChild}add_event_listeners(t){return this.values_map.forEach(e=>{const n=t.querySelector(`[${e.id}]`),s=/(on)\w+/g.exec(n.outerHTML)[0].split("on")[1];n.removeAttribute(`on${s}`),n.addEventListener(s,e.value.bind(this))}),t}}const HTML=(t,...e)=>new Parser(t,...e);export{UUID,HTML};
