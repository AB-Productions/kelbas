"use strict";const UUID=()=>{let e=()=>(65536*(1+Math.random())|0).toString(16).substring(1);return"p"+(e()+e())+"-"+e()};class Parser{constructor(e,...t){this.values_map=[],this.string=this.concat_string(e,t)}concat_string(e,t){return e.map((e,r)=>{const n=t[r],s=UUID();switch(!0){case"function"==typeof n:e=e.concat(`"${s} `),this.values_map.push({id:s,value:n});break;case"object"==typeof n||n&&1===n.nodeType:e=`${e} <template ${s}></template>`,this.values_map.push({id:s,value:n});break;case"string"==typeof n:e=`${e}${n||""}`}return e}).reduce((e,t)=>e+t)}get fragment(){const e=document.createElement("template");return e.innerHTML=this.string,this.place_values(e.content.cloneNode(!0))}get container(){let e=(new DOMParser).parseFromString(this.string,"text/html");return this.place_values(e.body.firstChild)}get svg(){let e=new DOMParser;const t=this.container;t.setAttribute("xmlns","http://www.w3.org/2000/svg");let r=e.parseFromString(t.outerHTML,"image/svg+xml");return this.place_values(r.documentElement)}place_values(e){return this.values_map.forEach(t=>{const r=e.outerHTML?e.parentNode.querySelector(`[${t.id}]`):e.querySelector(`[${t.id}]`);if("function"==typeof t.value){const e=/(on)\w+/g.exec(r.outerHTML)[0].split("on")[1];r.addEventListener(e,t.value.bind(this)),r.removeAttribute(`on${e}`)}else if("object"==typeof t.value)if(t.value.children)r.replaceWith(t.value);else{const e=document.createDocumentFragment();t.value.forEach(t=>e.appendChild(t)),r.replaceWith(e)}}),e}}function HTML(e,...t){return new Parser(e,...t)}window.HTML=HTML,module.exports=HTML;
